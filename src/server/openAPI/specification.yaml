openapi: 3.0.0
info:
  title: Yacht Ordinal Server
  description: An example TypeScript server using Express and Prisma
  version: 1.0.0
servers:
  - url: http://localhost:3000
paths:
  /:
    get:
      summary: Health check
      responses:
        200:
          description: OK
  /listings:
    post:
      summary: Create a new listing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ethAddress
                - ethPrice
                - inscriptionId
                - inscriptionNumber
              properties:
                ethAddress:
                  type: string
                  pattern: "^0x[a-fA-F0-9]{40}$"
                ethPrice:
                  type: string
                inscriptionId:
                  type: string
                inscriptionNumber:
                  type: string
      responses:
        201:
          description: Listing created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Listing"
    put:
      summary: Update a listing by ID (cancel or mark as sold)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - listingId
                - isBuy
              properties:
                listingId:
                  type: string
                signature:
                  type: string
                isBuy:
                  type: boolean
                pkpPublicKey:
                  type: string
                encryptionPubKey:
                  type: string
      responses:
        200:
          description: Listing updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Listing"
    get:
      summary: Get listings with optional query parameters
      parameters:
        - name: address
          in: query
          required: false
          schema:
            type: string
            pattern: "^0x[a-fA-F0-9]{40}$"
        - name: id
          in: query
          required: false
          schema:
            type: string
            pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$"
      responses:
        200:
          description: Listings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Listing"
  /listings/buyer/withdraw:
    post:
      summary: Purchase a listing by buyer
      parameters:
        - name: listingId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - authSig
                - taprootAddress
              properties:
                authSig:
                  $ref: "#/components/schemas/AuthSignature"
                taprootAddress:
                  type: string
                  pattern: "^((bc|tb)1)[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{2,}\\d*[qpzry9x8gf2tvdw0s3jn54khce6mua7l]$"

      responses:
        200:
          description: Listing purchased successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates if the purchase was successful or not
                required:
                  - success
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error

  /listing/seller/withdraw:
    get:
      summary: Seller withdraws the purchase price of a listing
      parameters:
        - name: listingId
          in: query
          required: true
          schema:
            type: string
            pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$"
          description: The listing ID to withdraw (must be a valid UUID)
      responses:
        "200":
          description: Successfully processed the withdrawal request
        "400":
          description: Bad request (e.g., invalid listing ID)
        "401":
          description: Unauthorized (e.g., user not authenticated)
        "403":
          description: Forbidden (e.g., user not authorized to perform this action)
        "404":
          description: Listing not found
        "500":
          description: Internal server error
  /listings/confirm:
    put:
      summary: Confirm a listing's status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "listingId"
              properties:
                listingId:
                  type: string
      responses:
        "200":
          description: Listing
          content:
            application/json:
              schema:
                type: object
                properties:
                  listing:
                    $ref: "#/components/schemas/Listing"
                    required:
                      - listing
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /listings/buyer/{accountId}:
    get:
      summary: Get listings by buyer account ID
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$"
      responses:
        200:
          description: Listings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Listing"
        400:
          description: Bad request - Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        404:
          description: Account not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        500:
          description: Error occurred while getting the listings
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /listings/buy:
    put:
      summary: Buy a listing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - listingId
                - accountId
              properties:
                listingId:
                  type: string
                  pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$"
                accountId:
                  type: string
                  pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$"

      responses:
        200:
          description: Listing bought successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Listing"
        400:
          description: Bad request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error

  /listings/seller/{accountId}:
    get:
      summary: Get listings by seller account ID
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$"
      responses:
        200:
          description: Listings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Listing"
        400:
          description: Bad request - Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        404:
          description: Account not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        500:
          description: Error occurred while getting the listings
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /accounts:
    post:
      summary: Create a new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ethAddress:
                  type: string
                  pattern: "^0x[a-fA-F0-9]{40}$"
              required:
                - ethAddress
      responses:
        "201":
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "500":
          description: Error occurred while creating the account
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      summary: Update an account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ethAddress:
                  type: string
                  pattern: "^0x[a-fA-F0-9]{40}$"
                btcPayoutAddress:
                  type: string
              required:
                - ethAddress
                - btcPayoutAddress
      responses:
        "200":
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: Bad request - Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Error occurred while updating the account
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    get:
      summary: Get an account by Ethereum address
      parameters:
        - in: query
          name: address
          schema:
            type: string
          description: Ethereum address to filter accounts
          required: true
      responses:
        "200":
          description: The account corresponding to the provided Ethereum address
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error

  /swapdata:
    get:
      summary: Retrieve swap data
      parameters:
        - name: pkpBtcAddress
          in: query
          required: true
          schema:
            type: string
        - name: inscriptionId
          in: query
          required: true
          schema:
            type: string
        - name: pkpEthAddress
          in: query
          required: true
          schema:
            type: string
        - name: ethPrice
          in: query
          required: true
          schema:
            type: string
        - name: btcDestinationAddress
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Swap data retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SwapData"
        400:
          description: Bad request - Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        500:
          description: Error occurred while retrieving the swap data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

components:
  schemas:
    Account:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        ethAddress:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        btcPayoutAddress:
          type: string

    Listing:
      type: object
      properties:
        id:
          type: string
        inscriptionId:
          type: string
        inscriptionNumber:
          type: string
        listingAccountId:
          type: string
        ethPrice:
          type: string
        pkpPublicKey:
          type: string
        pkpBtcAddress:
          type: string
        createdAt:
          type: string
          format: date-time
        sellDate:
          type: string
          format: date-time
        cancelledDate:
          type: string
          format: date-time
        confirmedDate:
          type: string
          format: date-time

    AuthSignature:
      type: object
      properties:
        sig:
          type: string
        derivedVia:
          type: string
        signedMessage:
          type: string
        address:
          type: string

    ListingStatus:
      type: string
      enum:
        - NeedsCardinal
        - NeedsOrdinal
        - NeedsBoth
        - Ready
        - Sold
        - Cancelled

    SwapData:
      type: object
      properties:
        ordinalUtxo:
          $ref: "#/components/schemas/Utxo"
        cardinalUtxo:
          $ref: "#/components/schemas/Utxo"
        winningTransfer:
          $ref: "#/components/schemas/EthTransfer"
        losingTransfers:
          type: array
          items:
            $ref: "#/components/schemas/EthTransfer"
        maxPriorityFeePerGas:
          type: string
        maxFeePerGas:
          type: string
        hashForInput0:
          type: string
        hashForInput1:
          type: string
        transaction:
          type: string

    Utxo:
      type: object
      properties:
        txId:
          type: string
        vout:
          type: number
        address:
          type: string
        scriptPubKey:
          type: string
        amount:
          type: number
        confirmations:
          type: number

    EthTransfer:
      type: object
      properties:
        blockNum:
          type: string
        from:
          type: string
        value:
          type: string
